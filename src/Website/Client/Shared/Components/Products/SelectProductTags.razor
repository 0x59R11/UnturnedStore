
<div class="border-bottom border-1 position-relative" style="width: @(UseWidth ? widthString : "auto"); padding: 0.375rem;">
    <ul class="d-flex flex-wrap m-0 p-0" style="gap: 0.25rem; min-height: 25px; list-style: none;">
        @foreach (MProductTag tag in productTags)
        {
            <ProductTag Tag="tag" RemoveButton="true" OnTagRemove="HandleRemoveTag" />
        }
        @if (productTags.Length == 0)
        {
            <li class="text-muted small p-0" style="cursor: default;"><i>No Tags Selected</i></li>
        }
    </ul>
    <div class="position-absolute mb-1" style="right: 0; bottom: 0;" title="@(MaximumTagsReached ? "Maximum Tag Count Reached" : null)">
        <button class="btn btn-sm btn-secondary" data-bs-toggle="dropdown" disabled=@MaximumTagsReached><i class="fas fa-tags" style="transform: translateY(7%);"></i></button>
        <ul class="dropdown-menu dropdown-menu-start dropdown-menu-md-end position-absolute">
            @foreach (MProductTag tag in availableTags)
            {
                <li><a class="dropdown-item" style="cursor: pointer;" @onclick:preventDefault 
                 @onclick="() => HandleAddTag(tag.Title)">@tag.Title</a></li>
            }
            @if (availableTags.Count() == 0)
            {
                <li class="text-muted" style="padding: 0.25rem 1rem; cursor: default;"><i>All Tags Selected</i></li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public string Tags { get; set; }
    [Parameter]
    public EventCallback<string> TagsChanged { get; set; }

    [Parameter]
    public int MaxTags { get; set; } = 0;
    private bool MaximumTagsReached => productTags.Length >= MaxTags;

    private MProductTag[] productTags => ProductTagsConstants.DeSerializeTags(Tags);

    private IEnumerable<MProductTag> availableTags => ProductTagsConstants.ProductTags.Concat(productTags).GroupBy(t => t.Title).Where(g => g.Count() == 1).Select(t => t.FirstOrDefault());

    [Parameter]
    public int Width { get; set; } = 600;
    public bool UseWidth => Width > 0;

    private string widthString => Width + "px";

    private async Task HandleAddTag(string Tag)
    {
        if (MaxTags > 0 && MaximumTagsReached) return;
        if (productTags.Select(t => t.Title).Contains(Tag)) return;
        await TagsChanged.InvokeAsync(string.IsNullOrEmpty(Tags) ? Tag : ProductTagsConstants.CombineTags(Tags, Tag));
    }

    private async Task HandleRemoveTag(MProductTag Tag)
    {
        if (!productTags.Select(t => t.Title).Contains(Tag.Title)) return;
        var taglist = Tags.Split(",").ToList();
        taglist.Remove(Tag.Title);
        await TagsChanged.InvokeAsync(ProductTagsConstants.CombineTags(taglist.ToArray()));
    }
}
