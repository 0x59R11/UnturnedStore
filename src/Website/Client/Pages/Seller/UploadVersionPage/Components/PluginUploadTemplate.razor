@using System.Reflection
@using Website.Client.Services


    <div class="mb-3">
        <label class="form-label">Plugin</label>
        <InputFile class="form-control" OnChange="OnPluginFileChange" type="file" accept=".dll" disabled="@isZipping" />

        <div class="mt-2">
            <ul class="list-group">
                @if (Plugin != null)
                {
                    <li class="list-group-item">
                        @Plugin.Name
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Libraries</label>
        <InputFile class="form-control" OnChange="OnPluginLibraryFileChange" accept=".dll" multiple disabled="@isZipping" />

        <div class="mt-2">
            <ul class="list-group">
                @foreach (var library in Libraries)
                {
                    <li class="list-group-item d-flex">
                        <div>
                            @library.Name
                        </div>
                        <button class="ms-auto btn btn-sm btn-danger" type="button" @onclick="() => Libraries.Remove(library)" disabled="@isZipping">Remove</button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="mb-3 d-flex">
        <div>

        </div>
        <div class="ms-auto">
            @if (isZipping)
            {
                <button class="btn btn-secondary" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Zipping plugin and libraries...
                </button>
            }
            else
            {
                <button class="btn btn-secondary" type="button" @onclick="ZipPluginAsync">ZIP Archive</button>
            }
        </div>
        
    </div>


@code
{
    [Parameter]
    public MVersion Model { get; set; }

    [Parameter]
    public EventCallback OnZipArchive { get; set; }

    [Inject]
    public ZIPService ZIPService { get; set; }

    public IBrowserFile Plugin { get; set; }

    public List<IBrowserFile> Libraries { get; set; } = new List<IBrowserFile>();

    private bool isZipping = false;
    private int disabled => isZipping ? 1 : 0;

    private void OnPluginFileChange(InputFileChangeEventArgs e)
    {
        Plugin = e.File;
    }

    private void OnPluginLibraryFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(50);
        Libraries.AddRange(files);
    }

    private async Task ZipPluginAsync()
    {
        if (Plugin == null)
            return;

        isZipping = true;

        Model.Content = await ZIPService.ZipAsync(new Dictionary<string, IEnumerable<IBrowserFile>>()
        {
            { "/", new IBrowserFile[] { Plugin } },
            { "Libraries", Libraries }
        });

        Model.FileName = Plugin.Name.Replace(".dll", ".zip", StringComparison.OrdinalIgnoreCase);
        Model.ContentType = "application/zip";

        Plugin = null;
        Libraries = new List<IBrowserFile>();

        isZipping = false;
        await OnZipArchive.InvokeAsync();
    }
} 