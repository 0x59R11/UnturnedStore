@using System.Reflection

@if (Model != null)
{
    <EditForm Model="Model" OnValidSubmit="SubmitAsync">
        <div class="mb-3">
            <label class="form-label">Version</label>
            <InputText class="form-control" @bind-Value="Model.Name" placeholder="1.0.0" />
            <div class="form-text">You should use SemVer format</div>
        </div>

        <div class="mb-3">
            <label class="form-label">Branch</label>
            <InputSelect class="form-select" @bind-Value="Model.BranchId">
                @foreach (var branch in Product.Branches)
                    {
                    <option value="@branch.Id">@branch.Name</option>
                    }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Changelog</label>
            <InputTextArea class="form-control" @bind-Value="Model.Changelog" />
        </div>

        <div class="mb-3">
            <label class="form-label">Plugin</label>
            <InputFile class="form-control" OnChange="OnPluginFileChange" type="file" accept=".dll" />

            <div class="mt-2">
                <ul class="list-group">
                    @if (Model.FileName != null)
                    {
                        <li class="list-group-item">
                            @Model.FileName
                        </li>
                    }
                </ul>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Libraries</label>
            <InputFile class="form-control" OnChange="OnLibraryFileChange" accept=".dll" multiple />

            <div class="mt-2">
                <ul class="list-group">
                    @foreach (var library in Model.Libraries)
                    {
                        <li class="list-group-item d-flex">
                            <div>
                                @library.FileName
                            </div>
                            <button class="ms-auto btn btn-sm btn-danger" type="button" @onclick="() => Model.Libraries.Remove(library)">Remove</button>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            @if (isLoading)
            {
                <LoadingButton />
            }
            else
            {
                <button class="btn btn-primary" type="submit">Upload</button>
            }
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public ProductModel Product { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    private VersionModel defaultModel => new VersionModel()
    {
        Libraries = new List<PluginLibraryModel>(),
        IsEnabled = true,
        BranchId = Product.Branches.FirstOrDefault()?.Id ?? 0
    };

    public VersionModel Model { get; set; }

    protected override void OnParametersSet()
    {
        Model = defaultModel;
    }

    private bool isLoading;
    private async Task SubmitAsync()
    {
        isLoading = true;
        var response = await HttpClient.PostAsJsonAsync("api/plugins", Model);

        var plugin = await response.Content.ReadFromJsonAsync<VersionModel>();
        Product.Branches.First(x => x.Id == plugin.BranchId).Plugins.Add(plugin);
        Model = defaultModel;
        isLoading = false;
        StateHasChanged();
    }

    private async Task OnPluginFileChange(InputFileChangeEventArgs e)
    {
        var pluginFile = e.File;

        Model.FileName = pluginFile.Name;
        Model.Content = new byte[pluginFile.Size];
        await pluginFile.OpenReadStream().ReadAsync(Model.Content);

        var assembly = Assembly.Load(Model.Content);
        Model.Version = assembly.GetName().Version.ToString();

    }

    private async Task OnLibraryFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(50);

        foreach (var file in files)
        {
            var library = new PluginLibraryModel()
            {
                FileName = file.Name,
                Data = new byte[file.Size]
            };
            await file.OpenReadStream(30 * 1024 * 1024).ReadAsync(library.Data);
            Model.Libraries.Add(library);
        }
    }
}
