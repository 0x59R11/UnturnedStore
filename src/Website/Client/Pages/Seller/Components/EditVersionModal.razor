<div class="modal fade" id="@nameof(EditVersionModal)" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            @if (Model != null)
            {
                <div class="modal-header">
                    <h5 class="modal-title">Edit @BranchName @VersionName</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
            
                <EditForm Model="Model" OnValidSubmit="SubmitAsync">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="Model.Name" placeholder="1.0.0" />
                            <div class="form-text">Keep this short and in a certain style, preferred: Major.Minor.Patch</div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Changelog</label>
                            <InputTextArea class="form-control" @bind-Value="Model.Changelog" />
                        </div>

                        <div class="mb-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        @if (isLoading)
                        {
                            <LoadingButton />
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary">Edit</button>
                        }
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>


@code {

    [Inject]
    public IJSRuntime JsRuntime { get; set; }
    [Inject]
    public HttpClient HttpClient { get; set; }

    public VersionModel Model { get; set; }
    public string VersionName { get; set; }
    public string BranchName { get; set; }

    public async Task ShowAsync(VersionModel model, string branchName)
    {
        Model = model;
        VersionName = model.Name;
        BranchName = branchName;

        StateHasChanged();
        await JsRuntime.ShowModalStaticAsync(nameof(EditVersionModal));
    }

    private bool isLoading = false;
    public async Task SubmitAsync()
    {
        isLoading = true;
        await HttpClient.PutAsJsonAsync("api/versions", Model);
        isLoading = false;

        await JsRuntime.HideModalAsync(nameof(EditVersionModal));
    }
}
